generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  mentor
  admin
}

enum EnrollmentStatus {
  active
  completed
  dropped
}

enum CourseLevel {
  beginner
  intermediate
  advanced
}

enum VideoStatus {
  uploaded
  processing
  ready
  failed
}

enum ScheduleType {
  live
  deadline
  event
}

enum NotificationType {
  system
  assignment
  message
}

model User {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  passwordHash String
  image        String?
  role         Role         @default(student)
  createdAt    DateTime     @default(now())

  profile      Profile?
  courses      Course[]     @relation("CourseMentor")
  enrollments  Enrollment[] @relation("StudentEnrollments")
  submissions  Submission[]
  grades       Grade[]      @relation("Grader")
  comments     Comment[]
  messageThreadsMentor MessageThread[] @relation("MentorThreads")
  messageThreadsStudent MessageThread[] @relation("StudentThreads")
  messages     Message[]
  notifications Notification[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  socials   Json
  timezone  String
  languages String[]
  user      User     @relation(fields: [userId], references: [id])
}

model Course {
  id           String       @id @default(cuid())
  title        String
  slug         String       @unique
  description  String
  level        CourseLevel
  language     String
  tags         String[]
  thumbnailUrl String?
  published    Boolean      @default(false)
  mentorId     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  mentor       User         @relation("CourseMentor", fields: [mentorId], references: [id])
  lessons      Lesson[]
  enrollments  Enrollment[]
  assignments  Assignment[]
  schedule     ScheduleItem[]
}

model Enrollment {
  id         String            @id @default(cuid())
  courseId   String
  studentId  String
  status     EnrollmentStatus  @default(active)
  progress   Int               @default(0)
  createdAt  DateTime          @default(now())

  course     Course            @relation(fields: [courseId], references: [id])
  student    User              @relation("StudentEnrollments", fields: [studentId], references: [id])

  @@unique([courseId, studentId])
}

model VideoAsset {
  id           String      @id @default(cuid())
  path         String
  size         Int
  mimeType     String
  durationSec  Int
  thumbnailUrl String?
  status       VideoStatus @default(uploaded)
  lessons      Lesson[]
}

model Lesson {
  id          String    @id @default(cuid())
  courseId    String
  title       String
  slug        String
  order       Int
  summary     String
  durationSec Int
  resources   String[]
  videoAssetId String?

  course      Course    @relation(fields: [courseId], references: [id])
  videoAsset  VideoAsset? @relation(fields: [videoAssetId], references: [id])
  comments    Comment[]
}

model Assignment {
  id          String       @id @default(cuid())
  courseId    String
  title       String
  description String
  dueAt       DateTime
  maxPoints   Int
  rubric      Json?

  course      Course      @relation(fields: [courseId], references: [id])
  submissions Submission[]
}

model Submission {
  id           String    @id @default(cuid())
  assignmentId String
  studentId    String
  files        String[]
  text         String?
  submittedAt  DateTime  @default(now())
  gradeId      String?

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  student    User       @relation(fields: [studentId], references: [id])
  grade      Grade?     @relation(fields: [gradeId], references: [id])
}

model Grade {
  id           String   @id @default(cuid())
  submissionId String   @unique
  graderId     String
  points       Int
  feedback     String?
  gradedAt     DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id])
  grader     User       @relation("Grader", fields: [graderId], references: [id])
}

model Comment {
  id           String   @id @default(cuid())
  lessonId     String?
  assignmentId String?
  authorId     String
  content      String
  createdAt    DateTime @default(now())

  lesson   Lesson?   @relation(fields: [lessonId], references: [id])
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  author   User      @relation(fields: [authorId], references: [id])
}

model MessageThread {
  id        String   @id @default(cuid())
  courseId  String
  mentorId  String
  studentId String
  createdAt DateTime @default(now())

  course  Course @relation(fields: [courseId], references: [id])
  mentor  User   @relation("MentorThreads", fields: [mentorId], references: [id])
  student User   @relation("StudentThreads", fields: [studentId], references: [id])
  messages Message[]

  @@unique([courseId, mentorId, studentId])
}

model Message {
  id        String   @id @default(cuid())
  threadId  String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  readAt    DateTime?

  thread MessageThread @relation(fields: [threadId], references: [id])
  author User          @relation(fields: [authorId], references: [id])
}

model Notification {
  id        String            @id @default(cuid())
  userId    String
  type      NotificationType
  payload   Json
  readAt    DateTime?
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
}

model ScheduleItem {
  id        String       @id @default(cuid())
  courseId  String
  title     String
  startsAt  DateTime
  endsAt    DateTime
  type      ScheduleType

  course Course @relation(fields: [courseId], references: [id])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
}
